
> react-typescript-starter@0.1.0 test
> react-scripts test

Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
FAIL src/nested.test.ts
  ● Testing the Question[] functions › Testing the getNonEmptyQuestions functions

    expect(received).toEqual(expected) // deep equality

    - Expected  -  1
    + Received  + 32

    - Array []
    + Array [
    +   Object {
    +     "body": "",
    +     "expected": "",
    +     "id": 1,
    +     "name": "Question 1",
    +     "options": Array [],
    +     "points": 1,
    +     "published": false,
    +     "type": "multiple_choice_question",
    +   },
    +   Object {
    +     "body": "",
    +     "expected": "",
    +     "id": 47,
    +     "name": "My New Question",
    +     "options": Array [],
    +     "points": 1,
    +     "published": false,
    +     "type": "multiple_choice_question",
    +   },
    +   Object {
    +     "body": "",
    +     "expected": "",
    +     "id": 2,
    +     "name": "Question 2",
    +     "options": Array [],
    +     "points": 1,
    +     "published": false,
    +     "type": "short_answer_question",
    +   },
    + ]

      150 |
      151 |     test("Testing the getNonEmptyQuestions functions", () => {
    > 152 |         expect(getNonEmptyQuestions(BLANK_QUESTIONS)).toEqual([]);
          |                                                       ^
      153 |         expect(getNonEmptyQuestions(SIMPLE_QUESTIONS)).toEqual(
      154 |             BACKUP_SIMPLE_QUESTIONS
      155 |         );

      at Object.<anonymous> (src/nested.test.ts:152:55)

  ● Testing the Question[] functions › Testing the removeQuestion

    expect(received).toEqual(expected) // deep equality

    - Expected  - 12
    + Received  +  2

      Array [
        Object {
          "body": "",
          "expected": "",
    -     "id": 47,
    -     "name": "My New Question",
    +     "id": 1,
    +     "name": "Question 1",
          "options": Array [],
          "points": 1,
          "published": false,
          "type": "multiple_choice_question",
    -   },
    -   Object {
    -     "body": "",
    -     "expected": "",
    -     "id": 2,
    -     "name": "Question 2",
    -     "options": Array [],
    -     "points": 1,
    -     "published": false,
    -     "type": "short_answer_question",
        },
      ]

      221 |
      222 |     test("Testing the removeQuestion", () => {
    > 223 |         expect(removeQuestion(BLANK_QUESTIONS, 1)).toEqual([
          |                                                    ^
      224 |             {
      225 |                 id: 47,
      226 |                 name: "My New Question",

      at Object.<anonymous> (src/nested.test.ts:223:52)

  ● Testing the Question[] functions › Testing the getNames function

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 0

      Array [
    -   "Question 1",
        "My New Question",
        "Question 2",
      ]

      354 |
      355 |     test("Testing the getNames function", () => {
    > 356 |         expect(getNames(BLANK_QUESTIONS)).toEqual([
          |                                           ^
      357 |             "Question 1",
      358 |             "My New Question",
      359 |             "Question 2"

      at Object.<anonymous> (src/nested.test.ts:356:43)

  ● Testing the Question[] functions › Testing the sumPoints function

    expect(received).toEqual(expected) // deep equality

    Expected: 3
    Received: 2

      387 |
      388 |     test("Testing the sumPoints function", () => {
    > 389 |         expect(sumPoints(BLANK_QUESTIONS)).toEqual(3);
          |                                            ^
      390 |         expect(sumPoints(SIMPLE_QUESTIONS)).toEqual(5);
      391 |         expect(sumPoints(TRIVIA_QUESTIONS)).toEqual(20);
      392 |         expect(sumPoints(EMPTY_QUESTIONS)).toEqual(25);

      at Object.<anonymous> (src/nested.test.ts:389:44)

  ● Testing the Question[] functions › Testing the toCSV function

    expect(received).toEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 1

    - id,name,options,points,published
    - 1,Question 1,0,1,false
    - 47,My New Question,0,1,false
    - 2,Question 2,0,1,false
    + 47,My New Question,0,1,false2,Question 2,0,1,false

      403 |
      404 |     test("Testing the toCSV function", () => {
    > 405 |         expect(toCSV(BLANK_QUESTIONS)).toEqual(`id,name,options,points,published
          |                                        ^
      406 | 1,Question 1,0,1,false
      407 | 47,My New Question,0,1,false
      408 | 2,Question 2,0,1,false`);

      at Object.<anonymous> (src/nested.test.ts:405:40)

  ● Testing the Question[] functions › Testing the makeAnswers function

    expect(received).toEqual(expected) // deep equality

    - Expected  - 6
    + Received  + 0

    @@ -1,14 +1,8 @@
      Array [
        Object {
          "correct": false,
    -     "questionId": 1,
    -     "submitted": false,
    -     "text": "",
    -   },
    -   Object {
    -     "correct": false,
          "questionId": 47,
          "submitted": false,
          "text": "",
        },
        Object {

      434 |
      435 |     test("Testing the makeAnswers function", () => {
    > 436 |         expect(makeAnswers(BLANK_QUESTIONS)).toEqual([
          |                                              ^
      437 |             { questionId: 1, correct: false, text: "", submitted: false },
      438 |             { questionId: 47, correct: false, text: "", submitted: false },
      439 |             { questionId: 2, correct: false, text: "", submitted: false }

      at Object.<anonymous> (src/nested.test.ts:436:46)

  ● Testing the Question[] functions › Testing the publishAll function

    expect(received).toEqual(expected) // deep equality

    - Expected  - 10
    + Received  +  0

    @@ -1,19 +1,9 @@
      Array [
        Object {
          "body": "",
          "expected": "",
    -     "id": 1,
    -     "name": "Question 1",
    -     "options": Array [],
    -     "points": 1,
    -     "published": true,
    -     "type": "multiple_choice_question",
    -   },
    -   Object {
    -     "body": "",
    -     "expected": "",
          "id": 47,
          "name": "My New Question",
          "options": Array [],
          "points": 1,
          "published": true,

      467 |
      468 |     test("Testing the publishAll function", () => {
    > 469 |         expect(publishAll(BLANK_QUESTIONS)).toEqual([
          |                                             ^
      470 |             {
      471 |                 id: 1,
      472 |                 name: "Question 1",

      at Object.<anonymous> (src/nested.test.ts:469:45)

  ● Testing the Question[] functions › Testing the sameType function

    TypeError: Cannot read properties of undefined (reading 'type')

      173 |  */
      174 | export function sameType(questions: Question[]): boolean {
    > 175 |     const typeAtIndex = questions[0].type;
          |                                      ^
      176 |     const isSameType = questions.every(
      177 |         (question: Question): boolean => question.type === typeAtIndex
      178 |     );

      at sameType (src/nested.ts:175:38)
      at Object.<anonymous> (src/nested.test.ts:639:16)

  ● Testing the Question[] functions › Testing the addNewQuestion function

    expect(received).toEqual(expected) // deep equality

    - Expected  - 12
    + Received  +  1

    - Array [
    -   Object {
    -     "body": "",
    -     "expected": "",
    -     "id": 142,
    -     "name": "A new question",
    -     "options": Array [],
    -     "points": 1,
    -     "published": false,
    -     "type": "short_answer_question",
    -   },
    - ]
    + Array []

      648 |         expect(
      649 |             addNewQuestion([], 142, "A new question", "short_answer_question")
    > 650 |         ).toEqual([NEW_BLANK_QUESTION]);
          |           ^
      651 |         expect(
      652 |             addNewQuestion(
      653 |                 BLANK_QUESTIONS,

      at Object.<anonymous> (src/nested.test.ts:650:11)

  ● Testing the Question[] functions › Testing the renameQuestionById function

    expect(received).toEqual(expected) // deep equality

    - Expected  - 10
    + Received  +  0

    @@ -1,19 +1,9 @@
      Array [
        Object {
          "body": "",
          "expected": "",
    -     "id": 1,
    -     "name": "New Name",
    -     "options": Array [],
    -     "points": 1,
    -     "published": false,
    -     "type": "multiple_choice_question",
    -   },
    -   Object {
    -     "body": "",
    -     "expected": "",
          "id": 47,
          "name": "My New Question",
          "options": Array [],
          "points": 1,
          "published": false,

      668 |
      669 |     test("Testing the renameQuestionById function", () => {
    > 670 |         expect(renameQuestionById(BLANK_QUESTIONS, 1, "New Name")).toEqual([
          |                                                                    ^
      671 |             {
      672 |                 id: 1,
      673 |                 name: "New Name",

      at Object.<anonymous> (src/nested.test.ts:670:68)

  ● Testing the Question[] functions › Test the changeQuestionTypeById function

    expect(received).toEqual(expected) // deep equality

    - Expected  - 10
    + Received  +  0

    @@ -1,19 +1,9 @@
      Array [
        Object {
          "body": "",
          "expected": "",
    -     "id": 1,
    -     "name": "Question 1",
    -     "options": Array [],
    -     "points": 1,
    -     "published": false,
    -     "type": "short_answer_question",
    -   },
    -   Object {
    -     "body": "",
    -     "expected": "",
          "id": 47,
          "name": "My New Question",
          "options": Array [],
          "points": 1,
          "published": false,

      788 |         expect(
      789 |             changeQuestionTypeById(BLANK_QUESTIONS, 1, "short_answer_question")
    > 790 |         ).toEqual([
          |           ^
      791 |             {
      792 |                 id: 1,
      793 |                 name: "Question 1",

      at Object.<anonymous> (src/nested.test.ts:790:11)

  ● Testing the Question[] functions › Testing the editOption function

    expect(received).toEqual(expected) // deep equality

    - Expected  - 12
    + Received  +  0

    @@ -1,21 +1,9 @@
      Array [
        Object {
          "body": "",
          "expected": "",
    -     "id": 1,
    -     "name": "Question 1",
    -     "options": Array [
    -       "NEW OPTION",
    -     ],
    -     "points": 1,
    -     "published": false,
    -     "type": "multiple_choice_question",
    -   },
    -   Object {
    -     "body": "",
    -     "expected": "",
          "id": 47,
          "name": "My New Question",
          "options": Array [],
          "points": 1,
          "published": false,

      895 |
      896 |     test("Testing the editOption function", () => {
    > 897 |         expect(editOption(BLANK_QUESTIONS, 1, -1, "NEW OPTION")).toEqual([
          |                                                                  ^
      898 |             {
      899 |                 id: 1,
      900 |                 name: "Question 1",

      at Object.<anonymous> (src/nested.test.ts:897:66)

  ● Testing the Question[] functions › Testing the duplicateQuestionInArray function

    TypeError: Cannot read properties of undefined (reading 'name')

      295 |         makeBlankQuestion(
      296 |             newId,
    > 297 |             questions[indexTarget].name,
          |                                    ^
      298 |             questions[indexTarget].type
      299 |         )
      300 |     );

      at duplicateQuestionInArray (src/nested.ts:297:36)
      at Object.<anonymous> (src/nested.test.ts:1091:16)

PASS src/arrays.test.ts
PASS src/objects.test.ts
FAIL src/components/StartAttempt.test.tsx
  ● StartAttempt Component tests › There is an initially disabled Stop Quiz button

    expect(element).toBeDisabled()

    Received element is not disabled:
      <button class="btn btn-primary" type="button" />

      48 |         const stopButton = screen.getByRole("button", { name: /Stop Quiz/i });
      49 |         expect(stopButton).toBeInTheDocument();
    > 50 |         expect(stopButton).toBeDisabled();
         |                            ^
      51 |     });
      52 |     test("There is an initially enabled Mulligan button", () => {
      53 |         const mulliganButton = screen.getByRole("button", {

      at Object.<anonymous> (src/components/StartAttempt.test.tsx:50:28)

  ● StartAttempt Component tests › Clicking Start Quiz changes enabled buttons

    expect(element).toBeDisabled()

    Received element is not disabled:
      <button class="btn btn-primary" type="button" />

      101 |         startButton.click();
      102 |         // Then the start is disabled, stop is enabled, and mulligan is disabled
    > 103 |         expect(startButton).toBeDisabled();
          |                             ^
      104 |         expect(stopButton).toBeEnabled();
      105 |         expect(mulliganButton).toBeDisabled();
      106 |     });

      at Object.<anonymous> (src/components/StartAttempt.test.tsx:103:29)

  ● StartAttempt Component tests › Clicking Start and Stop Quiz changes enabled buttons

    expect(element).toBeDisabled()

    Received element is not disabled:
      <button class="btn btn-primary" type="button" />

      119 |         // Then the start is enabled, stop is disabled, and mulligan is enabled
      120 |         expect(startButton).toBeEnabled();
    > 121 |         expect(stopButton).toBeDisabled();
          |                            ^
      122 |         expect(mulliganButton).toBeEnabled();
      123 |     });
      124 |     test("Clicking Start, Stop, Mulligan sets attempts to original", () => {

      at Object.<anonymous> (src/components/StartAttempt.test.tsx:121:28)

  ● StartAttempt Component tests › Cannot click start quiz when out of attempts

    expect(element).toBeDisabled()

    Received element is not disabled:
      <button class="btn btn-primary" type="button" />

      164 |             // Then the buttons
      165 |             expect(startButton).toBeEnabled();
    > 166 |             expect(stopButton).toBeDisabled();
          |                                ^
      167 |             expect(mulliganButton).toBeEnabled();
      168 |             // And when we Start and then immediately stop the quiz...
      169 |             startButton.click();

      at Object.<anonymous> (src/components/StartAttempt.test.tsx:166:32)

FAIL src/components/TwoDice.test.tsx
  ● Console

    console.log
      YOU WIN!

      at rollLeft (src/components/TwoDice.tsx:22:21)

  ● StartAttempt Component tests › There is an initially disabled Stop Quiz button

    expect(element).toBeDisabled()

    Received element is not disabled:
      <button class="btn btn-primary" type="button" />

      48 |         const stopButton = screen.getByRole("button", { name: /Stop Quiz/i });
      49 |         expect(stopButton).toBeInTheDocument();
    > 50 |         expect(stopButton).toBeDisabled();
         |                            ^
      51 |     });
      52 |     test("There is an initially enabled Mulligan button", () => {
      53 |         const mulliganButton = screen.getByRole("button", {

      at Object.<anonymous> (src/components/StartAttempt.test.tsx:50:28)

  ● StartAttempt Component tests › Clicking Start Quiz changes enabled buttons

    expect(element).toBeDisabled()

    Received element is not disabled:
      <button class="btn btn-primary" type="button" />

      101 |         startButton.click();
      102 |         // Then the start is disabled, stop is enabled, and mulligan is disabled
    > 103 |         expect(startButton).toBeDisabled();
          |                             ^
      104 |         expect(stopButton).toBeEnabled();
      105 |         expect(mulliganButton).toBeDisabled();
      106 |     });

      at Object.<anonymous> (src/components/StartAttempt.test.tsx:103:29)

  ● StartAttempt Component tests › Clicking Start and Stop Quiz changes enabled buttons

    expect(element).toBeDisabled()

    Received element is not disabled:
      <button class="btn btn-primary" type="button" />

      119 |         // Then the start is enabled, stop is disabled, and mulligan is enabled
      120 |         expect(startButton).toBeEnabled();
    > 121 |         expect(stopButton).toBeDisabled();
          |                            ^
      122 |         expect(mulliganButton).toBeEnabled();
      123 |     });
      124 |     test("Clicking Start, Stop, Mulligan sets attempts to original", () => {

      at Object.<anonymous> (src/components/StartAttempt.test.tsx:121:28)

  ● StartAttempt Component tests › Cannot click start quiz when out of attempts

    expect(element).toBeDisabled()

    Received element is not disabled:
      <button class="btn btn-primary" type="button" />

      164 |             // Then the buttons
      165 |             expect(startButton).toBeEnabled();
    > 166 |             expect(stopButton).toBeDisabled();
          |                                ^
      167 |             expect(mulliganButton).toBeEnabled();
      168 |             // And when we Start and then immediately stop the quiz...
      169 |             startButton.click();

      at Object.<anonymous> (src/components/StartAttempt.test.tsx:166:32)

  ● TwoDice Component tests › There is a `left-die` and `right-die` testid

    TestingLibraryElementError: Unable to find an element by: [data-testid="left-die"]

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Left[0m
        [36m</button>[39m
        [36m<div />[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Right [0m
        [36m</button>[39m
        [36m<div>[39m
          [0mLeft Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieOne"[39m
          [36m>[39m
            [0m1[0m
          [36m</span>[39m
        [36m</div>[39m
        [36m<div>[39m
          [0mRight Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieTwo"[39m
          [36m>[39m
            [0m6[0m
          [36m</span>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      24 |     });
      25 |     test("There is a `left-die` and `right-die` testid", () => {
    > 26 |         const leftDie = screen.getByTestId("left-die");
         |                                ^
      27 |         const rightDie = screen.getByTestId("right-die");
      28 |         expect(leftDie).toBeInTheDocument();
      29 |         expect(rightDie).toBeInTheDocument();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByTestId (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/TwoDice.test.tsx:26:32)

  ● TwoDice Component tests › The `left-die` and `right-die` are two different numbers

    TestingLibraryElementError: Unable to find an element by: [data-testid="left-die"]

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Left[0m
        [36m</button>[39m
        [36m<div />[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Right [0m
        [36m</button>[39m
        [36m<div>[39m
          [0mLeft Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieOne"[39m
          [36m>[39m
            [0m1[0m
          [36m</span>[39m
        [36m</div>[39m
        [36m<div>[39m
          [0mRight Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieTwo"[39m
          [36m>[39m
            [0m6[0m
          [36m</span>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      30 |     });
      31 |     test("The `left-die` and `right-die` are two different numbers", () => {
    > 32 |         const leftDie = screen.getByTestId("left-die");
         |                                ^
      33 |         const rightDie = screen.getByTestId("right-die");
      34 |         const leftNumber = extractDigits(leftDie);
      35 |         const rightNumber = extractDigits(rightDie);

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByTestId (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/TwoDice.test.tsx:32:32)

  ● TwoDice Component tests › Clicking left button changes first number

    TestingLibraryElementError: Unable to find an element by: [data-testid="left-die"]

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Left[0m
        [36m</button>[39m
        [36m<div />[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Right [0m
        [36m</button>[39m
        [36m<div>[39m
          [0mLeft Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieOne"[39m
          [36m>[39m
            [0m5[0m
          [36m</span>[39m
        [36m</div>[39m
        [36m<div>[39m
          [0mRight Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieTwo"[39m
          [36m>[39m
            [0m6[0m
          [36m</span>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      54 |         expect(mathRandomFunction).toBeCalledTimes(3);
      55 |         // And the number to be 5
    > 56 |         const leftNumber = extractDigits(screen.getByTestId("left-die"));
         |                                                 ^
      57 |         expect(leftNumber).toEqual(5);
      58 |     });
      59 |     // Clicking right button changes second number

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByTestId (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/TwoDice.test.tsx:56:49)

  ● TwoDice Component tests › Clicking right button changes second number

    TestingLibraryElementError: Unable to find an element by: [data-testid="right-die"]

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Left[0m
        [36m</button>[39m
        [36m<div />[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Right [0m
        [36m</button>[39m
        [36m<div>[39m
          [0mLeft Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieOne"[39m
          [36m>[39m
            [0m1[0m
          [36m</span>[39m
        [36m</div>[39m
        [36m<div>[39m
          [0mRight Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieTwo"[39m
          [36m>[39m
            [0m5[0m
          [36m</span>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      66 |         expect(mathRandomFunction).toBeCalledTimes(3);
      67 |         // And the number to be 5
    > 68 |         const rightNumber = extractDigits(screen.getByTestId("right-die"));
         |                                                  ^
      69 |         expect(rightNumber).toEqual(5);
      70 |     });
      71 |     // Rolling two different numbers does not win or lose the game

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByTestId (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/TwoDice.test.tsx:68:50)

  ● TwoDice Component tests › Rolling two different numbers does not win or lose the game

    TestingLibraryElementError: Unable to find an element by: [data-testid="left-die"]

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Left[0m
        [36m</button>[39m
        [36m<div />[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Right [0m
        [36m</button>[39m
        [36m<div>[39m
          [0mLeft Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieOne"[39m
          [36m>[39m
            [0m1[0m
          [36m</span>[39m
        [36m</div>[39m
        [36m<div>[39m
          [0mRight Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieTwo"[39m
          [36m>[39m
            [0m6[0m
          [36m</span>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      74 |         const leftButton = screen.getByRole("button", { name: /Roll Left/i });
      75 |         const rightButton = screen.getByRole("button", { name: /Roll Right/i });
    > 76 |         const leftDie = screen.getByTestId("left-die");
         |                                ^
      77 |         const rightDie = screen.getByTestId("right-die");
      78 |         // When the left and right buttons are rolled once each
      79 |         leftButton.click();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByTestId (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/TwoDice.test.tsx:76:32)

  ● TwoDice Component tests › Getting snake eyes loses the game

    TestingLibraryElementError: Unable to find an element by: [data-testid="left-die"]

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Left[0m
        [36m</button>[39m
        [36m<div />[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Right [0m
        [36m</button>[39m
        [36m<div>[39m
          [0mLeft Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieOne"[39m
          [36m>[39m
            [0m1[0m
          [36m</span>[39m
        [36m</div>[39m
        [36m<div>[39m
          [0mRight Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieTwo"[39m
          [36m>[39m
            [0m6[0m
          [36m</span>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

       95 |         const leftButton = screen.getByRole("button", { name: /Roll Left/i });
       96 |         const rightButton = screen.getByRole("button", { name: /Roll Right/i });
    >  97 |         const leftDie = screen.getByTestId("left-die");
          |                                ^
       98 |         const rightDie = screen.getByTestId("right-die");
       99 |         // When the left and right buttons are rolled once each
      100 |         leftButton.click();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByTestId (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/TwoDice.test.tsx:97:32)

  ● TwoDice Component tests › Getting matching numbers wins the game

    TestingLibraryElementError: Unable to find an element by: [data-testid="left-die"]

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Left[0m
        [36m</button>[39m
        [36m<div />[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mRoll Right [0m
        [36m</button>[39m
        [36m<div>[39m
          [0mLeft Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieOne"[39m
          [36m>[39m
            [0m1[0m
          [36m</span>[39m
        [36m</div>[39m
        [36m<div>[39m
          [0mRight Die: [0m
          [36m<span[39m
            [33mdata-testid[39m=[32m"dieTwo"[39m
          [36m>[39m
            [0m6[0m
          [36m</span>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      119 |         const leftButton = screen.getByRole("button", { name: /Roll Left/i });
      120 |         const rightButton = screen.getByRole("button", { name: /Roll Right/i });
    > 121 |         const leftDie = screen.getByTestId("left-die");
          |                                ^
      122 |         const rightDie = screen.getByTestId("right-die");
      123 |         // When the left and right buttons are rolled once each
      124 |         leftButton.click();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByTestId (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/TwoDice.test.tsx:121:32)

FAIL src/bad-components/ChooseTeam.test.tsx
  ● Console

    console.error
      Warning: Encountered two children with the same key, `Alan Turing`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Col.js:72:8
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Row.js:22:3
          at div
          at ChooseTeam (/home/runner/work/tasks/tasks/src/bad-components/ChooseTeam.tsx:14:41)

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:67:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:43:5)
      at warnOnInvalidKey (node_modules/react-dom/cjs/react-dom.development.js:13620:11)
      at reconcileChildrenArray (node_modules/react-dom/cjs/react-dom.development.js:13651:21)
      at reconcileChildFibers (node_modules/react-dom/cjs/react-dom.development.js:14125:14)
      at reconcileChildren (node_modules/react-dom/cjs/react-dom.development.js:16997:28)
      at updateFragment (node_modules/react-dom/cjs/react-dom.development.js:17294:3)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:19102:14)

    console.error
      Warning: Encountered two children with the same key, `Alan Turing`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Col.js:72:8
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Row.js:22:3
          at div
          at ChooseTeam (/home/runner/work/tasks/tasks/src/bad-components/ChooseTeam.tsx:14:41)

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:67:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:43:5)
      at warnOnInvalidKey (node_modules/react-dom/cjs/react-dom.development.js:13620:11)
      at reconcileChildrenArray (node_modules/react-dom/cjs/react-dom.development.js:13651:21)
      at reconcileChildFibers (node_modules/react-dom/cjs/react-dom.development.js:14125:14)
      at reconcileChildren (node_modules/react-dom/cjs/react-dom.development.js:16997:28)
      at updateFragment (node_modules/react-dom/cjs/react-dom.development.js:17294:3)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:19102:14)

    console.error
      Warning: Encountered two children with the same key, `Alan Turing`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Col.js:72:8
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Row.js:22:3
          at div
          at ChooseTeam (/home/runner/work/tasks/tasks/src/bad-components/ChooseTeam.tsx:14:41)

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:67:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:43:5)
      at warnOnInvalidKey (node_modules/react-dom/cjs/react-dom.development.js:13620:11)
      at reconcileChildrenArray (node_modules/react-dom/cjs/react-dom.development.js:13651:21)
      at reconcileChildFibers (node_modules/react-dom/cjs/react-dom.development.js:14125:14)
      at reconcileChildren (node_modules/react-dom/cjs/react-dom.development.js:16997:28)
      at updateFragment (node_modules/react-dom/cjs/react-dom.development.js:17294:3)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:19102:14)

    console.error
      Warning: Encountered two children with the same key, `Alan Turing`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Col.js:72:8
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Row.js:22:3
          at div
          at ChooseTeam (/home/runner/work/tasks/tasks/src/bad-components/ChooseTeam.tsx:14:41)

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:67:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:43:5)
      at warnOnInvalidKey (node_modules/react-dom/cjs/react-dom.development.js:13620:11)
      at reconcileChildrenArray (node_modules/react-dom/cjs/react-dom.development.js:13651:21)
      at reconcileChildFibers (node_modules/react-dom/cjs/react-dom.development.js:14125:14)
      at reconcileChildren (node_modules/react-dom/cjs/react-dom.development.js:16997:28)
      at updateFragment (node_modules/react-dom/cjs/react-dom.development.js:17294:3)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:19102:14)

    console.error
      Warning: Encountered two children with the same key, `Alan Turing`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Col.js:72:8
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Row.js:22:3
          at div
          at ChooseTeam (/home/runner/work/tasks/tasks/src/bad-components/ChooseTeam.tsx:14:41)

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:67:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:43:5)
      at warnOnInvalidKey (node_modules/react-dom/cjs/react-dom.development.js:13620:11)
      at reconcileChildrenArray (node_modules/react-dom/cjs/react-dom.development.js:13651:21)
      at reconcileChildFibers (node_modules/react-dom/cjs/react-dom.development.js:14125:14)
      at reconcileChildren (node_modules/react-dom/cjs/react-dom.development.js:16997:28)
      at updateFragment (node_modules/react-dom/cjs/react-dom.development.js:17294:3)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:19102:14)

    console.error
      Warning: Encountered two children with the same key, `Alan Turing`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Col.js:72:8
          at div
          at /home/runner/work/tasks/tasks/node_modules/react-bootstrap/cjs/Row.js:22:3
          at div
          at ChooseTeam (/home/runner/work/tasks/tasks/src/bad-components/ChooseTeam.tsx:14:41)

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:67:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:43:5)
      at warnOnInvalidKey (node_modules/react-dom/cjs/react-dom.development.js:13620:11)
      at reconcileChildrenArray (node_modules/react-dom/cjs/react-dom.development.js:13651:21)
      at reconcileChildFibers (node_modules/react-dom/cjs/react-dom.development.js:14125:14)
      at reconcileChildren (node_modules/react-dom/cjs/react-dom.development.js:16997:28)
      at updateFragment (node_modules/react-dom/cjs/react-dom.development.js:17294:3)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:19102:14)

  ● ChooseTeam Component tests › Clicking the third team member works

    expect(received).toEqual(expected) // deep equality

    Expected: "Ada Lovelace"
    Received: "Alan Turing"

      27 |         const currentTeam = screen.queryAllByRole("listitem");
      28 |         expect(currentTeam).toHaveLength(1);
    > 29 |         expect(currentTeam[0].textContent).toEqual(third.textContent);
         |                                            ^
      30 |     });
      31 |     test("Clicking three team members works", () => {
      32 |         const [, second, third, , fifth] = screen.queryAllByRole("button");

      at Object.<anonymous> (src/bad-components/ChooseTeam.test.tsx:29:44)

  ● ChooseTeam Component tests › Clicking three team members works

    expect(received).toEqual(expected) // deep equality

    Expected: "Ada Lovelace"
    Received: "Alan Turing"

      36 |         const currentTeam = screen.queryAllByRole("listitem");
      37 |         expect(currentTeam).toHaveLength(3);
    > 38 |         expect(currentTeam[0].textContent).toEqual(third.textContent);
         |                                            ^
      39 |         expect(currentTeam[1].textContent).toEqual(second.textContent);
      40 |         expect(currentTeam[2].textContent).toEqual(fifth.textContent);
      41 |     });

      at Object.<anonymous> (src/bad-components/ChooseTeam.test.tsx:38:44)

  ● ChooseTeam Component tests › Clearing the team works

    expect(received).toEqual(expected) // deep equality

    Expected: "Ada Lovelace"
    Received: "Alan Turing"

      48 |         let currentTeam = screen.queryAllByRole("listitem");
      49 |         expect(currentTeam).toHaveLength(3);
    > 50 |         expect(currentTeam[0].textContent).toEqual(third.textContent);
         |                                            ^
      51 |         expect(currentTeam[1].textContent).toEqual(second.textContent);
      52 |         expect(currentTeam[2].textContent).toEqual(fifth.textContent);
      53 |         clear.click();

      at Object.<anonymous> (src/bad-components/ChooseTeam.test.tsx:50:44)

PASS src/bad-components/DoubleHalf.test.tsx
PASS src/functions.test.ts
FAIL src/components/ChangeType.test.tsx
  ● ChangeType Component tests › The initial type is Short Answer

    TestingLibraryElementError: Unable to find an element with the text: /Short Answer/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mshort_answer_question[0m
        [36m</button>[39m
      [36m</div>[39m
    [36m</body>[39m

       9 |     test("The initial type is Short Answer", () => {
      10 |         // We use `getByText` because the text MUST be there
    > 11 |         const typeText = screen.getByText(/Short Answer/i);
         |                                 ^
      12 |         expect(typeText).toBeInTheDocument();
      13 |     });
      14 |     test("The initial type is not Multiple Choice", () => {

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/ChangeType.test.tsx:11:33)

  ● ChangeType Component tests › There is a button labeled Change Type

    TestingLibraryElementError: Unable to find an accessible element with the role "button" and name `/Change Type/i`

    Here are the accessible roles:

      button:

      Name "short_answer_question":
      [36m<button[39m
        [33mclass[39m=[32m"btn btn-primary"[39m
        [33mtype[39m=[32m"button"[39m
      [36m/>[39m

      --------------------------------------------------

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mshort_answer_question[0m
        [36m</button>[39m
      [36m</div>[39m
    [36m</body>[39m

      19 |
      20 |     test("There is a button labeled Change Type", () => {
    > 21 |         const changeTypeButton = screen.getByRole("button", {
         |                                         ^
      22 |             name: /Change Type/i
      23 |         });
      24 |         expect(changeTypeButton).toBeInTheDocument();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByRole (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/ChangeType.test.tsx:21:41)

  ● ChangeType Component tests › Clicking the button changes the type.

    TestingLibraryElementError: Unable to find an accessible element with the role "button" and name `/Change Type/i`

    Here are the accessible roles:

      button:

      Name "short_answer_question":
      [36m<button[39m
        [33mclass[39m=[32m"btn btn-primary"[39m
        [33mtype[39m=[32m"button"[39m
      [36m/>[39m

      --------------------------------------------------

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mshort_answer_question[0m
        [36m</button>[39m
      [36m</div>[39m
    [36m</body>[39m

      26 |
      27 |     test("Clicking the button changes the type.", () => {
    > 28 |         const changeTypeButton = screen.getByRole("button", {
         |                                         ^
      29 |             name: /Change Type/i
      30 |         });
      31 |         changeTypeButton.click();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByRole (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/ChangeType.test.tsx:28:41)

  ● ChangeType Component tests › Clicking the button twice keeps the type the same.

    TestingLibraryElementError: Unable to find an accessible element with the role "button" and name `/Change Type/i`

    Here are the accessible roles:

      button:

      Name "short_answer_question":
      [36m<button[39m
        [33mclass[39m=[32m"btn btn-primary"[39m
        [33mtype[39m=[32m"button"[39m
      [36m/>[39m

      --------------------------------------------------

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<button[39m
          [33mclass[39m=[32m"btn btn-primary"[39m
          [33mtype[39m=[32m"button"[39m
        [36m>[39m
          [0mshort_answer_question[0m
        [36m</button>[39m
      [36m</div>[39m
    [36m</body>[39m

      39 |
      40 |     test("Clicking the button twice keeps the type the same.", () => {
    > 41 |         const changeTypeButton = screen.getByRole("button", {
         |                                         ^
      42 |             name: /Change Type/i
      43 |         });
      44 |         changeTypeButton.click();

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByRole (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/ChangeType.test.tsx:41:41)

FAIL src/components/CycleHoliday.test.tsx
  ● CycleHoliday Component tests › An initial holiday is displayed

    TestingLibraryElementError: Unable to find an element with the text: /Holiday: (.*)/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div>[39m
          [36m<button[39m
            [33mclass[39m=[32m"btn btn-primary"[39m
            [33mtype[39m=[32m"button"[39m
          [36m>[39m
            [0mAdvance by Alphabet[0m
          [36m</button>[39m
          [36m<button[39m
            [33mclass[39m=[32m"btn btn-primary"[39m
            [33mtype[39m=[32m"button"[39m
          [36m>[39m
            [0mAdvance by Year[0m
          [36m</button>[39m
        [36m</div>[39m
        [36m<div>[39m
          [0mHoliday: [0m
          [36m<span>[39m
            [0mChristmas[0m
          [36m</span>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

       9 |
      10 |     test("An initial holiday is displayed", () => {
    > 11 |         const initialHoliday = screen.getByText(/Holiday: (.*)/i);
         |                                       ^
      12 |         expect(initialHoliday).toBeInTheDocument();
      13 |     });
      14 |

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/components/CycleHoliday.test.tsx:11:39)

PASS src/components/Counter.test.tsx
PASS src/components/RevealAnswer.test.tsx
PASS src/bad-components/ColoredBox.test.tsx
PASS src/bad-components/ShoveBox.test.tsx
PASS src/App.test.tsx
--------------------|---------|----------|---------|---------|---------------------
File                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s   
--------------------|---------|----------|---------|---------|---------------------
All files           |   94.73 |    86.15 |   97.08 |   94.66 |                     
 src                |   94.15 |    87.71 |   98.59 |   94.04 |                     
  App.tsx           |     100 |      100 |     100 |     100 |                     
  arrays.ts         |     100 |      100 |     100 |     100 |                     
  functions.ts      |     100 |      100 |     100 |     100 |                     
  nested.ts         |   85.93 |    58.82 |   97.05 |   85.71 | 176-179,261-269,301 
  objects.ts        |   95.83 |      100 |     100 |   95.83 | 55                  
 src/bad-components |   95.65 |      100 |   92.85 |   95.65 |                     
  ChooseTeam.tsx    |   88.88 |      100 |      80 |   88.88 | 24                  
  ColoredBox.tsx    |     100 |      100 |     100 |     100 |                     
  DoubleHalf.tsx    |     100 |      100 |     100 |     100 |                     
  ShoveBox.tsx      |     100 |      100 |     100 |     100 |                     
 src/components     |   97.05 |       75 |   94.44 |   97.05 |                     
  ChangeType.tsx    |   66.66 |        0 |      50 |   66.66 | 11                  
  Counter.tsx       |     100 |      100 |     100 |     100 |                     
  CycleHoliday.tsx  |     100 |      100 |     100 |     100 |                     
  RevealAnswer.tsx  |     100 |      100 |     100 |     100 |                     
  StartAttempt.tsx  |     100 |      100 |     100 |     100 |                     
  TwoDice.tsx       |     100 |      100 |     100 |     100 |                     
 src/interfaces     |       0 |        0 |       0 |       0 |                     
  answer.ts         |       0 |        0 |       0 |       0 |                     
  question.ts       |       0 |        0 |       0 |       0 |                     
--------------------|---------|----------|---------|---------|---------------------

Test Suites: 6 failed, 9 passed, 15 total
Tests:       36 failed, 74 passed, 110 total
Snapshots:   0 total
Time:        9.697 s
Ran all test suites.
